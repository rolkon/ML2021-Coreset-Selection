from greedy_k_centers import k_center_greedy
import numpy as np
from os import path
import sys
sys.path.append('../../dataset/')
import dataset_manager

def generate_subset_indices(dataset_type='fullset', frac_of_full_set=0.5):
    """ Generates subset indices from the full dataset with the greedy k-centers method.
    
    Requires the latent space files generated by the latent space generator.
    
    Keyword arguments:
    dataset_type -- Either 'fullset' to generate k-centers of full dataset, or 'subset' to generate k-centers of subset.
    frac_of_full_set -- Fraction of the latent space datapoints the method generates
    
    """

    if(dataset_type=='fullset'):
        datapoints = np.loadtxt('CIFAR_latent_data_fullset.csv', delimiter=',')
    elif(dataset_type=='subset'):
        if path.exists('CIFAR_latent_data_subset.csv'):
            datapoints = np.loadtxt('CIFAR_latent_data_subset.csv', delimiter=',')
            
        # if subset latent space data does not exist, but the full set exists, use it instead with the subset indices
        else:
            datapoints = np.loadtxt('CIFAR_latent_data_fullset.csv', delimiter=',')
            indices = dataset_manager.CIFAR10_subset_indices()
            datapoints = datapoints[indices]
    else:
        print("generate_subset_indices: dataset type error: You have to choose either 'fullset' or 'subset'.")
        
    print(len(datapoints))

    budget = int(np.round(len(datapoints) * frac_of_full_set))

    seedsize = 1000
    seed = np.random.permutation(np.arange(0, len(datapoints)))[:seedsize]
    
    print(budget)

    # k-centers adds |budget| new points to the indices list, so we subtract the seeds
    #budget -= seedsize

    #indices = k_center_greedy(datapoints, seed, budget)

    #indices = np.concatenate((indices, seed))

    #np.savetxt('k_centers_indices.csv', indices, delimiter=',')